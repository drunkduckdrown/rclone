# .github/workflows/build-openlist-support.yml

name: Build rclone (Official Windows Method)

on:
  push:
    branches:
      - 'openlist-support'
  workflow_dispatch:

jobs:
  build-windows-official-way:
    # 1. 在 Windows 虚拟机上运行
    runs-on: windows-latest

    steps:
      # 检出你的代码
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2. 安装 Go，使用与官方一致的较新版本
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.0'

      # 3. 模仿官方方式，编译 rclone
      - name: Build rclone for Windows (Official Method)
        id: build
        shell: powershell
        run: |
          # 获取版本号
          $RCLONE_VERSION = git describe --tags
          Write-Host "Building version: $RCLONE_VERSION"
          echo "full_version=$RCLONE_VERSION" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          
          # (可选但推荐) 生成 Windows 资源文件
          Write-Host "Generating Windows resource file..."
          go run bin/resource_windows.go -version "$RCLONE_VERSION" -syso resource_windows_amd64.syso
          
          # ------------------- 核心步骤 -------------------
          # 3a. 明确禁用 CGO，与官方 build.yml 保持一致
          Write-Host "Setting CGO_ENABLED=0"
          $env:CGO_ENABLED = '0'

          # 3b. 使用 '-tags cmount' 编译，并注入版本信息
          Write-Host "Building rclone.exe with 'cmount' tag and CGO disabled..."
          go build -v -a -tags cmount -o rclone.exe -ldflags "-s -w -X github.com/rclone/rclone/fs.Version=$RCLONE_VERSION"
          # ------------------------------------------------

          # 验证产物
          Write-Host "Build complete. File info:"
          Get-Item rclone.exe

      # 4. 上传编译好的二进制文件
      - name: Upload Windows binary as artifact
        uses: actions/upload-artifact@v4
        with:
          name: rclone-windows-amd64-${{ steps.build.outputs.full_version }}
          path: ./rclone.exe
