# .github/workflows/build-openlist-support.yml

name: Build rclone with OpenList support (Native Windows Build)

on:
  push:
    branches:
      - 'openlist-support'
  workflow_dispatch:

jobs:
  # 我们将任务名称改为 build-on-windows，并在 windows-latest 虚拟机上运行
  build-on-windows:
    runs-on: windows-latest

    steps:
      # 第 1 步：检出你的代码
      # fetch-depth: 0 是正确的，可以获取版本 tag
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 第 2 步：安装 Go
      # 使用一个稳定的 Go 版本
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      # 第 3 步：在 Windows 环境下原生编译 rclone
      - name: Build rclone for Windows
        id: build
        # 我们现在在 Windows 环境中，所以使用 PowerShell 脚本
        shell: powershell
        run: |
          # 1. 获取版本号
          $RCLONE_VERSION = git describe --tags
          Write-Host "Building version: $RCLONE_VERSION"
          # 将版本号设置为一个输出变量，以便在后续步骤中使用
          echo "full_version=$RCLONE_VERSION" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          
          # 2. (可选但推荐) 生成 Windows 资源文件，这会给 exe 加上图标和版本信息
          Write-Host "Generating Windows resource file..."
          go run bin/resource_windows.go -version "$RCLONE_VERSION" -syso resource_windows_amd64.syso
          
          # 3. 原生编译 rclone 主程序
          # 注意：这里不再需要 GOOS, GOARCH, CGO_ENABLED=0 这些复杂的参数了！
          # 在 Windows 上编译时，CGO 默认就是启用的，所以 mount 命令会被自动包含。
          Write-Host "Building rclone.exe..."
          go build -v -a -o rclone.exe -ldflags "-s -w -X github.com/rclone/rclone/fs.Version=$RCLONE_VERSION"
          
          # 4. 验证产物
          Write-Host "Build complete. File info:"
          Get-Item rclone.exe

      # 第 4 步：上传编译好的二进制文件
      - name: Upload Windows binary as artifact
        uses: actions/upload-artifact@v4
        with:
          name: rclone-windows-amd64-${{ steps.build.outputs.full_version }}
          path: ./rclone.exe
