# .github/workflows/build-openlist-support.yml

name: Build rclone for Windows (openlist-support branch)

on:
  push:
    branches:
      - 'openlist-support'
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: ubuntu-latest

    steps:
      # 第 1 步：检出代码
      # fetch-depth: 0 仍然是好习惯，虽然我们不再用 describe
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 第 2 步：安装 Go
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      # 第 3 步：编译 rclone
      - name: Build rclone for Windows (amd64)
        run: |
          # 关键改动: 创建一个不依赖 tag 的版本号
          # 我们使用 分支名 + 短格式的commit哈希
          # 例如: openlist-support-a1b2c3d
          SHORT_SHA=$(git rev-parse --short HEAD)
          RCLONE_VERSION="${{ github.ref_name }}-${SHORT_SHA}"
          echo "Building version: $RCLONE_VERSION"
          
          # 步骤 3.2: 生成 Windows 资源文件
          # 这一步现在使用我们自己生成的版本号
          echo "Generating Windows resource file..."
          go run bin/resource_windows.go -version "$RCLONE_VERSION" -syso resource_windows_amd64.syso
          
          # 步骤 3.3: 交叉编译 rclone 主程序
          # 同样，将我们自己的版本号注入到最终的二进制文件中
          echo "Cross-compiling rclone for Windows..."
          GOOS=windows GOARCH=amd64 CGO_ENABLED=0 go build -v -o rclone.exe -ldflags "-s -w -X github.com/rclone/rclone/fs.Version=$RCLONE_VERSION"

      # 第 4 步：上传编译好的二进制文件
      - name: Upload Windows binary as artifact
        uses: actions/upload-artifact@v4
        with:
          name: rclone-windows-amd64-${{ github.ref_name }}-${{ env.SHORT_SHA }}
          path: ./rclone.exe
        env:
          # 从上一步获取 SHORT_SHA 以便在文件名中使用
          SHORT_SHA: $(git rev-parse --short HEAD)
