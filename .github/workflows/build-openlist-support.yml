# .github/workflows/build-openlist-support.yml

name: Build rclone for Windows (openlist-support branch)

on:
  push:
    branches:
      - 'openlist-support'
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: ubuntu-latest

    steps:
      # 第 1 步：检出代码
      # 关键改动(1): 使用 fetch-depth: 0 来获取完整的 git 历史和 tags
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 第 2 步：安装 Go
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      # 第 3 步：编译 rclone (分步进行，解决核心问题)
      # 关键改动(2): 我们不再使用 'make'，而是手动分步执行
      - name: Build rclone for Windows (amd64)
        run: |
          # 步骤 3.1: 手动获取版本号，就像 Makefile 做的那样
          RCLONE_VERSION=$(git describe --tags)
          echo "Building version: $RCLONE_VERSION"
          
          # 步骤 3.2: 编译并运行 resource_windows.go 工具。
          # 这一步【没有】设置 GOOS=windows，所以它会在 Linux 上原生编译和运行，生成 .syso 文件。
          # 这是解决 "exec format error" 的关键。
          echo "Generating Windows resource file..."
          go run bin/resource_windows.go -version "$RCLONE_VERSION" -syso resource_windows_amd64.syso
          
          # 步骤 3.3: 编译 rclone 主程序。
          # 只有在这一步，我们才设置 GOOS 和 GOARCH 来进行交叉编译。
          # Go 编译器会自动找到并使用上一步生成的 resource_windows_amd64.syso 文件。
          echo "Cross-compiling rclone for Windows..."
          GOOS=windows GOARCH=amd64 CGO_ENABLED=0 go build -v -o rclone.exe -ldflags "-s -w -X github.com/rclone/rclone/fs.Version=$RCLONE_VERSION"

      # 第 4 步：上传编译好的二进制文件
      - name: Upload Windows binary as artifact
        uses: actions/upload-artifact@v4
        with:
          name: rclone-windows-amd64-openlist-support
          path: ./rclone.exe
